version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/public:/var/www/html/public:ro
      - ./infrastructure/docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - app
    networks:
      - ironcode
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/php/Dockerfile
      target: development
    volumes:
      - ./backend:/var/www/html
      - laravel_storage:/var/www/html/storage
      - laravel_bootstrap_cache:/var/www/html/bootstrap/cache
    environment:
      - DB_HOST=postgres
      - DB_DATABASE=iron_code_skins
      - DB_USERNAME=ironcode
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
      - LOG_CHANNEL=stdout
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ironcode
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/node/Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - VITE_API_URL=http://localhost
      - VITE_WS_URL=ws://localhost
    networks:
      - ironcode
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: iron_code_skins
      POSTGRES_USER: ironcode
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ironcode
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ironcode -d iron_code_skins"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ironcode
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - ironcode
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.7.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - ironcode
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    networks:
      - ironcode
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - ironcode
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.5.3
    ports:
      - "3001:3000" # Porta 3000 já está em uso pelo frontend
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=secret
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ironcode
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/docker/alertmanager:/config
      - alertmanager_data:/data
    command:
      - '--config.file=/config/config.yml'
      - '--storage.path=/data'
    networks:
      - ironcode
    restart: unless-stopped

networks:
  ironcode:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  laravel_storage:
  laravel_bootstrap_cache:
  frontend_node_modules:
  prometheus_data:
  grafana_data:
  alertmanager_data:

name: Iron Code Skins CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Tests
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: iron_code_skins_test
          POSTGRES_USER: ironcode
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pgsql, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug
      
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
      
      - name: Install Dependencies
        working-directory: ./backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      
      - name: Prepare Environment
        working-directory: ./backend
        run: |
          cp .env.example .env
          sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=pgsql/' .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=localhost/' .env
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=iron_code_skins_test/' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=ironcode/' .env
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=secret/' .env
          sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=localhost/' .env
          php artisan key:generate
      
      - name: Run Migrations
        working-directory: ./backend
        run: php artisan migrate --force
      
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        working-directory: ./backend
        run: php artisan test --coverage --min=80
      
      - name: PHP Stan - Static Analysis
        working-directory: ./backend
        run: |
          composer require --dev phpstan/phpstan --no-interaction
          ./vendor/bin/phpstan analyse --memory-limit=2G
      
      - name: PHP CS Fixer - Code Style
        working-directory: ./backend
        run: |
          composer require --dev friendsofphp/php-cs-fixer --no-interaction
          ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run Tests
        working-directory: ./frontend
        run: npm test
      
      - name: Build Application
        working-directory: ./frontend
        run: npm run build
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  # Docker Build and Push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./infrastructure/docker/php/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./infrastructure/docker/node/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging server
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "Backend Image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}"
          echo "Frontend Image: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}"
          # Add actual deployment commands here
      
      - name: Run Health Check
        run: |
          sleep 30
          curl -f https://staging.ironcodeskins.com/api/health || exit 1
          echo "âœ… Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production server
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "Backend Image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}"
          echo "Frontend Image: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}"
          # Add actual deployment commands here
      
      - name: Run Health Check
        run: |
          sleep 30
          curl -f https://ironcodeskins.com/api/health || exit 1
          echo "âœ… Production deployment successful!"
      
      - name: Notify Success
        run: |
          echo "ðŸŽ‰ Iron Code Skins deployed successfully to production!"
          echo "Version: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
